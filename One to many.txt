1. Build a Hibernate application with association one to Many using entities:

   Department-Employee


Department1:-
=========
package com.ajp.lab;

import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;

@Entity
public class Department1 {
	
	@Id
	private Integer departmentId;
	private String departmentName;
	private Integer noOfEmployees;
	
	@OneToMany(mappedBy = "dept",cascade = CascadeType.ALL)
	List<Employee1> employeelist = new ArrayList<Employee1>();
	
	public Department1() {

	}

	public Integer getDepartmentId() {
		return departmentId;
	}

	public void setDepartmentId(Integer departmentId) {
		this.departmentId = departmentId;
	}

	public String getDepartmentName() {
		return departmentName;
	}

	public void setDepartmentName(String departmentName) {
		this.departmentName = departmentName;
	}

	public Integer getNoOfEmployees() {
		return noOfEmployees;
	}

	public void setNoOfEmployees(Integer noOfEmployees) {
		this.noOfEmployees = noOfEmployees;
	}

	public List<Employee1> getEmployeelist() {
		return employeelist;
	}

	public void setEmployeelist(List<Employee1> employeelist) {
		this.employeelist = employeelist;
	}
	
}
====================================================================
Employee1:-
========
package com.ajp.lab;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;

@Entity
public class Employee1 {

	@Id
	private Integer employeeId;
	private String employeeName;
	private String employeeEmail;
	private Integer experience;
	
	@ManyToOne
	@JoinColumn(name="departmentId")
	private Department1 dept;
	
	public Employee1() {

	}

	public Integer getEmployeeId() {
		return employeeId;
	}

	public void setEmployeeId(Integer employeeId) {
		this.employeeId = employeeId;
	}

	public String getEmployeeName() {
		return employeeName;
	}

	public void setEmployeeName(String employeeName) {
		this.employeeName = employeeName;
	}

	public String getEmployeeEmail() {
		return employeeEmail;
	}

	public void setEmployeeEmail(String employeeEmail) {
		this.employeeEmail = employeeEmail;
	}

	public Integer getExperience() {
		return experience;
	}

	public void setExperience(Integer experience) {
		this.experience = experience;
	}

	public Department1 getDept() {
		return dept;
	}

	public void setDept(Department1 dept) {
		this.dept = dept;
	}
	
}
====================================================================
EmployeeImpl:-
===========
package com.ajp.lab;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;

public class EmployeeImpl {

	public static void main(String[] args) {
		
		StandardServiceRegistry ssregistry=new StandardServiceRegistryBuilder().configure("Config.xml").build();
		Metadata metadata=new MetadataSources(ssregistry).getMetadataBuilder().build();
				
		SessionFactory sfactory=metadata.buildSessionFactory();
		
		Session session=sfactory.openSession();
		Transaction transaction=session.beginTransaction();
		
		Department1 dept1 = new Department1();
		dept1.setDepartmentId(5);
		dept1.setDepartmentName("CSE");
		dept1.setNoOfEmployees(20);
		
		Employee1 e1 = new Employee1();
		e1.setEmployeeId(101);
		e1.setEmployeeName("Madhu");
		e1.setEmployeeEmail("madhu@gmail.com");
		e1.setExperience(5);
		
		Employee1 e2 = new Employee1();
		e2.setEmployeeId(102);
		e2.setEmployeeName("Janu");
		e2.setEmployeeEmail("janu@gmail.com");
		e2.setExperience(4);
		
		Employee1 e3 = new Employee1();
		e3.setEmployeeId(103);
		e3.setEmployeeName("Siri");
		e3.setEmployeeEmail("siri@gmail.com");
		e3.setExperience(3);
		
		dept1.getEmployeelist().add(e1);
		dept1.getEmployeelist().add(e2);
		dept1.getEmployeelist().add(e3);
		
		session.persist(dept1);
		
		transaction.commit();
		System.out.println("Records inserted successfully");
		session.close();
		sfactory.close();
		
	}
	
}
====================================================================
Config.xml:-
=======
<?xml version="1.0" encoding="UTF-8"?>
<hibernate-configuration>
	<session-factory>
	
		<!-- Database connection settings -->
		<property name = "hibernate.connection.driver_class">org.postgresql.Driver</property>
		<property name = "hibernate.connection.url">jdbc:postgresql://localhost/anudip</property>
		<property name = "hibernate.connection.username">postgres</property>
		<property name = "hibernate.connection.password">Venky@123</property>
		<property name = "hibernate.current_session_context_class">thread</property>
	
		<!-- JDBC connection pool settings -->
		<property name="hibernate.c3p0.min_size">5</property>
    	<property name="hibernate.c3p0.max_size">20</property>
    	
    	<!-- Other Hibernate properties -->
    	<property name="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</property>
    	<property name="hibernate.show_sql">true</property>
    	<property name="hibernate.hbm2ddl.auto">update</property>
		
		<mapping class = "com.ajp.lab.Department1" />
		<mapping class = "com.ajp.lab.Employee1" />
			
	</session-factory>
</hibernate-configuration>